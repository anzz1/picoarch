diff --git a/src/platform/libretro/libretro.c b/src/platform/libretro/libretro.c
index 5726fe654bc0dde07bc28bd6eecd6ba6a64ceb55..4ffbdbb360ac46e5a5ed42924f8e68258737a4f6 100644
--- a/src/platform/libretro/libretro.c
+++ b/src/platform/libretro/libretro.c
@@ -1453,6 +1453,48 @@ void retro_init(void) {
 	updateAudioLatency      = false;
 }
 
+static int frames = 0;
+static int defer_frames = 1;
+static void* deferred_data = NULL;
+static size_t deferred_size = 0;
+
+static void free_deferred_data(void) {
+	if (deferred_size) {
+		if (logCallback) logCallback(RETRO_LOG_INFO, "Freed deferred save state.\n");
+		free(deferred_data);
+		deferred_data = NULL;
+		deferred_size = 0;
+	}
+}
+
+static void defer_unserialize(const void *data, size_t size) {
+	free_deferred_data();
+
+	if (data==NULL || size<=0) return;
+
+	if (logCallback) logCallback(RETRO_LOG_INFO, "Deferred save state load.\n");
+
+	deferred_data = malloc(size);
+	memcpy(deferred_data, data, size);
+	deferred_size = size;
+}
+static void update_deferred(void) {
+	frames += 1;
+
+	if (frames<defer_frames) return;
+
+	if (deferredSetup) _doDeferredSetup();
+
+	if (deferred_size==0) return;
+
+	retro_unserialize(deferred_data, deferred_size);
+
+	if (logCallback) logCallback(RETRO_LOG_INFO, "Loaded deferred save state.\n");
+
+	free_deferred_data();
+}
+
+
 void retro_deinit(void) {
 	if (outputBuffer) {
 #ifdef _3DS
@@ -1491,6 +1533,8 @@ void retro_deinit(void) {
 	audioLowPassRange = 0;
 	audioLowPassLeftPrev = 0;
 	audioLowPassRightPrev = 0;
+
+	free_deferred_data();
 }
 
 static int turboclock = 0;
@@ -1524,9 +1568,11 @@ int16_t cycleturbo(bool a, bool b, bool l, bool r) {
 }
 
 void retro_run(void) {
-	if (deferredSetup) {
-		_doDeferredSetup();
-	}
+	// if (deferredSetup) {
+	// 	_doDeferredSetup();
+	// }
+	if (frames<defer_frames) update_deferred();
+
 	uint16_t keys;
 	bool skipFrame = false;
 
@@ -2144,9 +2190,9 @@ void retro_unload_game(void) {
 }
 
 size_t retro_serialize_size(void) {
-	if (deferredSetup) {
-		_doDeferredSetup();
-	}
+	// if (deferredSetup) {
+	// 	_doDeferredSetup();
+	// }
 	struct VFile* vfm = VFileMemChunk(NULL, 0);
 	mCoreSaveStateNamed(core, vfm, SAVESTATE_SAVEDATA | SAVESTATE_RTC);
 	size_t size = vfm->size(vfm);
@@ -2155,9 +2201,9 @@ size_t retro_serialize_size(void) {
 }
 
 bool retro_serialize(void* data, size_t size) {
-	if (deferredSetup) {
-		_doDeferredSetup();
-	}
+	// if (deferredSetup) {
+	// 	_doDeferredSetup();
+	// }
 	struct VFile* vfm = VFileMemChunk(NULL, 0);
 	mCoreSaveStateNamed(core, vfm, SAVESTATE_SAVEDATA | SAVESTATE_RTC);
 	if ((ssize_t) size > vfm->size(vfm)) {
@@ -2173,9 +2219,15 @@ bool retro_serialize(void* data, size_t size) {
 }
 
 bool retro_unserialize(const void* data, size_t size) {
-	if (deferredSetup) {
-		_doDeferredSetup();
+	// if (deferredSetup) {
+	// 	_doDeferredSetup();
+	// }
+
+	if (frames<defer_frames) {
+		defer_unserialize(data,size);
+		return true;
 	}
+
 	struct VFile* vfm = VFileFromConstMemory(data, size);
 	bool success = mCoreLoadStateNamed(core, vfm, SAVESTATE_RTC);
 	vfm->close(vfm);
